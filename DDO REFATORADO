#CONFIGURAÇÃO DO GLUE
%idle_timeout 29   %glue_version 4.0  
%worker_type G.1X  
%number_of_workers 2  
%region sa-east-1
%security_config authorized-security-configuration
%connections analytics-glue-connection-aza, analytics-glue-connection-azc
%additional_python_modules awswrangler, boto3, numpy==1.21.0 

---------------------------------------------------------------------------------------------------------

#BIBLIOTECAS IMPORTADAS
import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue import DynamicFrame 
import re
import json
import datetime
import locale
import awswrangler as wr
import pandas as pd
import boto3
from itertools import product
from pyspark.sql import functions as F
from pyspark.sql import SparkSession
from pyspark.sql.window import Window
from awsglue.transforms import Filter
from pyspark.sql.types import StructType, StructField, StringType, ArrayType, TimestampType, DateType, IntegerType
from pyspark.sql.functions import to_date, to_timestamp, date_format

---------------------------------------------------------------------------------------------------------

# args = getResolvedOptions(sys.argv, ["SESSION_ID"])
sc = SparkContext.getOrCreate()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)

---------------------------------------------------------------------------------------------------------

query_ddo = '''
SELECT 
ex3_caso AS caso
,name AS idt_unic_ddo
,ex3_complemento_do_pedido
,ex3_numero_da_pasta_origem_da_demanda
,ex3_numero_protocolo
,ex3_pedidos_do_processo  
'ex3_agencia'
,'ex3_agencia_de_saque_da_op'
,'ex3_banco'
,'ex3_canal_de_contratacao'
,'ex3_cliente_afirma_querer_devolver_valor'
,'ex3_cliente_depositou_valor_em_juizo'
,'ex3_conta'
,'ex3_convenio_pagador'
,'ex3_codigo_da_loja'
,'ex3_data_da_baixa'
,'ex3_data_da_contratacao'
,'ex3_data_do_valor_liberado'
,'ex3_descreva_tipo_de_baixa'
,'ex3_digitador_bloqueado'
,'ex3_forma_da_liberacao_do_credito'
,'ex3_houve_desconto_no_beneficio'
,'ex3_houve_liberacao_do_credito'
,'identificada_baixa_escabin'
,'ex3_matricula'
,'ex3_nome_da_loja'
,'ex3_numero_da_op'
,'ex3_numero_da_operacao_anterior'
,'ex3_numero_do_cheque'
,'ex3_numero_da_operacao_contrato'
,'n_mero_do_novo_contrato_refinancimento'
,'ex3_origem_do_contrato_label'
,'ex3_quantidade_de_parcelas'
,'ex3_quantidade_de_parcelas_pagas'
,'ex3_status_da_op_label'
,'ex3_status_do_cheque_label'
,'ex3_status_do_contrato'
,'ex3_valor_da_contratacao_com_encargos'
,'ex3_valor_da_parcela'
,'ex3_valor_do_novo_contrato_refinanc'
,'ex3_valor_liberado_para_refin'
,'ex3_valor_liberado_creditado'
,'ex3_valor_retido_para_quita_o_de_refin_label'
,'ex3_valor_total_das_parcelas_pagas'
,'ex3_ade'
,'ex3_ultimo_contrato_reclamado_refin'
,'ex3_ano_de_fabricacao'
,'ex3_ano_modelo'
,'ex3_chassi'
,'ex3_juros_requeridos_label'
,'ex3_marca'
,'ex3_modelo'
,'ex3_numero_da_proposta'
,'ex3_renavam'
,'ex3_seguro_protecao_financeira'
,'ex3_tarifas_requeridas_label'
,'ex3_placa'
,'ex3_uf_placa'
,'ex3_tipo_de_baixa'
,'ex3_agencia_recebedora'
,'ex3_autor_possui_conta_no_itau'
,'ex3_banco_recebedor'
,'ex3_conta_recebedora'
,'ex3_data_vencimento_da_1_parcela'
,'ex3_descreva'
,'ex3_descricao_da_empresa'
,'ex3_produto_reclamado_label'
,'ex3_qual_empresa_label'
,'ex3_tipo_de_contrato_label'
,'ex3_trata_se_de_contrato_cedido'
,'ex3_reclamacao_se_refere_ao_produto_iti'
,'ex3_agencia_conta_digital'
,'ex3_alega_que_nao_movimentou_conta_no_re'
,'ex3_analise_da_reclamacao'
,'ex3_canal_de_formalizacao'
,'ex3_causa_da_baixa_label'
,'ex3_cliente_informa_receber_notificacao'
,'ex3_data_da_baixa_da_operacao'
,'ex3_data_da_primeira_cobranca'
,'ex3_data_da_ultima_cobranca'
,'ex3_data_da_ultima_movimentacao'
,'ex3_data_da_ultima_renovacao'
,'ex3_data_do_cad_regime_de_encerramento'
,'ex3_numero_do_contrato_anterior'
,'ex3_data_do_encerramento'
,'ex3_data_do_fato_gerador'
,'ex3_houve_troco_label'
,'ex3_houve_renovacao_do_seguro'
,'ex3_motivador_do_cancelamento'
,'ex3_motivo_da_reclamacao_label'
,'ex3_numero_conta_digital'
,'ex3_numero_da_operacao'
,'ex3_numero_da_apolice'
,'ex3_ocorrencia_com_debito_aut_trata_de'
,'ex3_origem_do_encerramento'
,'ex3_produto_tarifa_reclamada_label'
,'ex3_qual_canal_foi_feita_a_contratacao'
,'ex3_qual_canal_foi_feita_a_formalizacao'
,'ex3_qual_o_pacote_reclamado'
,'ex3_quantidade_de_contratos'
,'ex3_reclama_de_venda_casada_subordinada'
,'ex3_reclamacao_envolve_conta_digital'
,'ex3_seguro_contestado_label'
,'ex3_seguro_reclamado_label'
,'ex3_status_da_conta'
,'ex3_status_do_servico_na_data_apuracao'
,'ex3_trata_se_de_perda_de_isencao'
,'ex3_tratou_se_de_portabilidade'
,'ex3_valor_da_primeira_cobranca'
,'ex3_valor_da_ultima_cobranca'
,'ex3_analise_administrativa'
,'ex3_forma_de_pagamento_das_parcelas'
,'ex3_tipo_de_conta_do_terceiro_label'
FROM "database_db_compartilhado_consumer_workflowjuridico"."ex3_cadastro_ddo_hist"

'''
workgroup = 'analytics-workgroup'
db = "workspace_db" # Database destino

---------------------------------------------------------------------------------------------------------

# Executa a consulta SQL no Athena e carrega os dados como DataFrame
df_ddo = wr.athena.read_sql_query(
 sql=query_ddo,
 database=db,
 workgroup=workgroup
)
---------------------------------------------------------------------------------------------------------

#DEIXA TUDO EM STRING PARA EVITAR PROBLEMAS 
schema = StructType([
    StructField(col_name, StringType(), True) 
    for col_name in df_ddo.columns
])  

---------------------------------------------------------------------------------------------------------
# Converter para DataFrame
df_ddo = spark.createDataFrame(df_ddo,schema)
---------------------------------------------------------------------------------------------------------

#BIBLIOTECAS IMPORTANTES NO CODIGO PARA CONTAGEM DOS CAMPOS
from pyspark.sql import SparkSession
from pyspark.sql import functions as F
from pyspark.sql.types import StructType, StructField, StringType, TimestampType
---------------------------------------------------------------------------------------------------------

# Configuração das regras para identificar contagem de campos
regras = [
    {
        "colunas": ["ex3_convenio_pagador"],
        "carteira": "IC",
        "ex3_complemento_do_pedido": ['DOC/TED','Contrato Cheque','Contrato OP','Contrato Cedido','Portabilidade','Proposta excluída'],
        "data": "2025-03-29 00:00:00"
    },
    {
        "colunas": ["ex3_canal_de_contratacao","ex3_codigo_da_loja","n_mero_do_novo_contrato_refinancimento"],
        "carteira": "IC",
        "ex3_complemento_do_pedido": ['DOC/TED','Contrato Cheque','Contrato OP'],
        "data": "2025-03-29 00:00:00"
    },
    {
        "colunas": ["ex3_origem_do_contrato_label","ex3_numero_da_operacao_contrato","ex3_ultimo_contrato_reclamado_refin"],
        "carteira": "IC",
        "ex3_complemento_do_pedido": ['DOC/TED','Contrato Cheque','Contrato OP','Contrato Cedido','Exibição de Documentos','Portabilidade'],
        "data": "2025-03-29 00:00:00"
    },
    {
        "colunas": [
                    "ex3_data_da_contratacao","ex3_agencia","ex3_banco","ex3_conta","ex3_data_do_valor_liberado","ex3_forma_da_liberacao_do_credito","ex3_houve_desconto_no_beneficio","ex3_houve_liberacao_do_credito","ex3_matricula"
                    ,"ex3_nome_da_loja","ex3_quantidade_de_parcelas","ex3_quantidade_de_parcelas_pagas","ex3_valor_da_parcela","ex3_valor_da_contratacao_com_encargos","ex3_valor_do_novo_contrato_refinanc","ex3_valor_liberado_para_refin","ex3_valor_liberado_creditado","ex3_valor_retido_para_quita_o_de_refin"],
        "carteira": "IC",
        "ex3_complemento_do_pedido": ['DOC/TED','Contrato Cheque','Contrato OP','Portabilidade'],
        "data": "2025-03-29 00:00:00"
    },
    {
        "colunas": ["ex3_numero_da_operacao_anterior"],
        "carteira": "IC",
        "ex3_complemento_do_pedido": ['DOC/TED','Contrato Cheque','Contrato OP', 'Exibição de Documentos','Portabilidade'],
        "data": "2025-03-29 00:00:00"
    },
    {
        "colunas": ["identificada_baixa_escabin","ex3_digitador_bloqueado","ex3_cliente_afirma_querer_devolver_valor","ex3_cliente_depositou_valor_em_juizo"],
        "carteira": "IC",
        "ex3_complemento_do_pedido": ['DOC/TED','Contrato Cheque','Contrato OP','Portabilidade','Proposta excluída'],
        "data": "2025-03-29 00:00:00"
    },
    {
        "colunas": ["ex3_placa","ex3_renavam","ex3_uf_placa","ex3_modelo"."ex3_marca","ex3_ano_modelo","ex3_ano_de_fabricacao","ex3_data_da_contratacao","ex3_numero_da_proposta","ex3_chassi","ex3_numero_da_operacao","ex3_numero_da_operacao_contrato"],
        "carteira": "Veículos Contra Cobrança",
        "ex3_complemento_do_pedido": ['Juros','Seguro Proteção Financeira','Ilegitimidade','Tarifa','Exibição de Documentos'],
        "data": "2024-09-27 00:00:00"
    },
    {
        "colunas": ["ex3_seguro_protecao_financeira","ex3_juros_requeridos_label","ex3_tarifas_requeridas_label"],
        "carteira": "Veículos Contra Cobrança",
        "ex3_complemento_do_pedido": ['Juros','Seguro Proteção Financeira','Ilegitimidade','Tarifa','Exibição de Documentos'],
        "data": "2024-12-09 00:00:00"
    },
]
---------------------------------------------------------------------------------------------------------

# Lista de todas as colunas de flags
colunas_flags = [col for regra in regras for col in regra["colunas"]]

# Criar as colunas de flag temporárias (1 e 2)
df_flags = df_ddo
for regra in regras:
    colunas = regra["colunas"]
    ex3_complemento_do_pedido_list = regra["ex3_complemento_do_pedido"]
    dt_limite = regra["data"]
    
    for col_check in colunas:
      for col_check in colunas:
          cond_col = F.when(
              (F.col(col_check).isNotNull()) &
              (F.col(col_check) != "") &
              (F.length(F.trim(F.col(col_check))) > 0) &
              (F.col("nom_crtr_prso_juri") == regra["carteira"]) &
              (F.col("ex3_complemento_do_pedido").isin(regra["ex3_complemento_do_pedido"])) &
              (F.col("dt_criacao") >= F.lit(regra["data"])),
              F.lit(1)
          ).when(
              (F.col(col_check).isNotNull()) &
              (F.col(col_check) != "") &
              (F.length(F.trim(F.col(col_check))) > 0),
              F.lit(2)
          ).otherwise(F.lit(0))
      
          df_flags = df_flags.withColumn(f"flag_{col_check}", cond_col)

# Somar as flags para gerar "automatica" e "manual"
# Forma correta usando soma de colunas PySpark
automatica_expr = sum(F.when(F.col(f"flag_{c}") == 1, 1).otherwise(0) for c in colunas_flags)
manual_expr = sum(F.when(F.col(f"flag_{c}") == 2, 1).otherwise(0) for c in colunas_flags)

df_final = df_flags.withColumn("automatica", automatica_expr).withColumn("manual", manual_expr)
